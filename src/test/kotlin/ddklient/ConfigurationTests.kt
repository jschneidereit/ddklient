/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ddklient

import io.kotlintest.data.forall
import io.kotlintest.extensions.system.withEnvironment
import io.kotlintest.matchers.collections.shouldContainAll
import io.kotlintest.matchers.collections.shouldHaveSize
import io.kotlintest.shouldBe
import io.kotlintest.shouldThrow
import io.kotlintest.specs.StringSpec
import io.kotlintest.tables.row
import java.util.*

class ConfigurationTests : StringSpec({
    "getPassword should throw when env var not set" {
        withEnvironment(DDK_PASSWORD_KEY to null) {
            shouldThrow<IllegalArgumentException> { Configuration().password() }
        }
    }

    "getPassword should throw when env var invalid" {
        withEnvironment(DDK_PASSWORD_KEY to "") {
            shouldThrow<IllegalArgumentException> { Configuration().password()  }
        }
    }

    "getPassword should return value set for env var" {
        val password = UUID.randomUUID().toString()
        withEnvironment(DDK_PASSWORD_KEY to password) {
            Configuration().password() shouldBe password
        }
    }

    "getDomain should throw when env var not set" {
        withEnvironment(DDK_DOMAIN_KEY to null) {
            shouldThrow<IllegalArgumentException> { Configuration().domain() }
        }
    }

    "getDomain should throw when env var invalid" {
        withEnvironment(DDK_DOMAIN_KEY to "") {
            shouldThrow<IllegalArgumentException> { Configuration().domain() }
        }
    }

    "getDomain should return value set for env var" {
        val domain = "github.com"
        withEnvironment(DDK_DOMAIN_KEY to domain) {
            Configuration().domain() shouldBe domain
        }
    }

    "getDomain should throw for potentially invalid domain setting" {
        val invalid = UUID.randomUUID().toString()
        withEnvironment(DDK_DOMAIN_KEY to invalid) {
            shouldThrow<IllegalArgumentException> { Configuration().domain() }
        }
    }

    "getHosts should throw on invalid settings" {
        forall(row(""), row(","), row(", ,")) { hosts: String ->
            withEnvironment(DDK_HOSTS_KEY to hosts) {
                shouldThrow<IllegalArgumentException> { Configuration().hosts() }
            }
        }
    }

    "getHosts should return on valid settings" {
        withEnvironment(DDK_HOSTS_KEY to "@, ,www") {
            val hosts = Configuration().hosts().toSet()
            hosts shouldHaveSize  2
            hosts.shouldContainAll("@", "www")
        }
    }
})